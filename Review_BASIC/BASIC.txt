int (정수형) 양수, 0, 음수
char (문자형) ‘A’
String (문자열) “2017 학년도”
숫자  CPU  문자  CPU
0    0    ‘0’   48 (ASCII Code)
1    1    ‘1’   49
2    2    ‘2’   50
3    3    ‘A’   65
4    4    ‘B’   66
5    5    ‘a’   97
6    6    ‘b’   98
7    7    ‘0’   98
Float (실수) float f = 3.14f 
Double (실수) double d = 3.14
Boolean (논리형)(2진수, 0 또는 1)

\n 줄바꿈, \t 탭, \b backspace, \a alert
1. 산술연산자
 +add -sub *mul /div %mod

2. 관계연산자 비교연산자
--> 왼쪽을 기준
> 크다, <작다, >=크거나 같다, <=작거나 같다, ==같다, !=같지않다

3. 논리연산자 True  : 1 , False : 0
Boolean 을 써야함
and && : 두 값 모두 참인 경우에만 True
or || : 두 값이 모두 거짓인 경우에만 False, 둘 중 하나만 참이어도 True
not ! : True 가 들어오면 결과는 False, False가 들어오면 결과는 True

x y  &&  ||  !
0 0   0   0  1
0 1   0   1  0
1 0   0   1  0
1 1   1   1  0

4. 비트 연산
값(결과값)
값을 비트 단위로 나누어서 계산
and &, or |, not ~, xor ^, left shift <<, right shift >>
계산된 결과값이 나옴
ex) 10 || 7 = 1010 || 0111 = 1
     이지만 10 | 7 = 1010 | 0111 에서는 각각을 비교하므로
     1010 (위 아래로 비교)
     0111
     -----
     1111 이 나오므로 15가 값으로 나옴
     10 | 7 = 15
ex) 10! = 1010 = 1, ~10 = ~1010 = 0101 = 5

x y   &    |   ~  ^(!=와 같음)
0 0   0    0  1   0
0 1   0    1  0   1
1 0   0    1  0   1
1 1   1    1  0   0

10 << 2 각 10에 해당하는 비트열을 왼쪽으로 2번 이동
0000 1010 --> 0010 1000 = 40 = 10 * 2 * 2 (왼쪽으로 한 칸 갈 때마다 2가 곱해지므로)
10 >> 2 각 10에 해당하는 비트열을 오른쪽으로 2번 이동
0000 1010 --> 0000 0010 = 2 = 10 / 2 / 2 (오른쪽으로 한 칸 갈 때마다 2가 나눠지므로) (나머지는 버림)

~10 --> -11  

5. 증감연산자
++ : 1을 증가시켜라 ex) ++x  = x +1
-- : 1을 감소시켜라 ex)  --x  = x -1
전위 : ++x  증가를 한 후 다른 연산 수행
후위 : x++ 다른 연산을 수행한 후 증가
ex) ++x + ++y
증감연산자가 앞에 있으면 증감이 우선
ex) x++ + y++
증감연산자가 뒤에 있으면 다른 연산이 우선

6. 대입연산자 복합대입연산자
= , += , -= , *= , /= , %= …(모든 연산자에 =붙힘)
Ex)
x = x + 3  x += 3
x = x && y  x &&= y

7. 조건연산자
(조건 식) ? 참일 경우 선택 값 : 거짓일 경우 선택 값
Ex)
String ch = (grade >= 60) ? ‘합격’ : ‘불합격’

제어문 
- 조건문 :  if~else 문 switch~case문
- 반복문 :  for문 while문 do~while문

Switch ~ Case 문
switch(정수값) {
	case 값1: 문장1;
		  break;
	case 값2: 문장2;
		  break;
	case 값3: 문장3;
		  break;
	case 값n: 문장n;
		  break;
	default: 수행문장;
}



While문
While(조건식)
{
	참인 경우 수행 문장;
}

Do ~ While문
do {
~~~~
~~~~
~~~~
} while(조건식);
한번 일단 do 하고 조건에 맞으면 다시 수행.

1. 배열
연속적인 메모리 구조 (선형리스트)
동일한 타입의 변수가 모인 그룹
목적: 실행속도 향상 (메모리 접근 시간 단축)
단, 배열의 크기만큼의 연속적인 공간이 필요함
i) 배열 선언
1) 배열타입 [] 배열명 = new 배열타입 [크기] ex) int [] num = new int [100];
2) 배열타입 배열명 [] = new 배열타입 [크기] ex) int num [] = new int [100];
ii) 배열의 초기화
int num [] = {69, 27, 30, 99, 42, 26, 55};
num.length  배열의 개수를 구한다. 
ex) int length_A = num.length  ex) for(int i=0; i<num.length; i++)
sort(정렬)
-Ascending Sort(오름차순) ex) a b c d e f / 가 나 다 라 / 1 2 3 4
-Descending Sort(내림차순) ex) z y x w v u / 하 파 타 차 / 100 99 98 97
Sorting Algorithm: Bubble, Selection, Insertion  O(n2), Count, Merge, Quick  O(nlogn) 
1) Bubble Sort
앞뒤 순서의 두 수를 서로 비교해서 오름차순이면 작은 수가 앞에 가도록 두 수의 위치를 바꿈.
두 수를 비교해서 앞에 큰 수를 변수 temp 안에 먼저 저장하고 뒤에 작은 수를 앞에 덮어 쓴 다음에 temp에 있던 큰 수를 뒤에 작은 수가 있었던 자리에 넣는다.
2) Selection Sort (선택정렬)

2. 2차원 배열: 행과 열로 구성된 배열
i) 선언: int num[행][열] = new int [2][3];
ii) 선언 및 초기화: int num[][] = { {90, 85, 72} , {56, 78, 99} };
int num[][] = { {첫 번째 행}, {두 번째 행}, {세 번째 행}…};
행 단위로 접근하는 것이 속도가 빠름


2. 클래스(class)
객체 생성을 위한 틀
 멤버 변수들
 멤버 함수들

필드: 변수들
Final  변수를 상수화 시켜서 모두가 쓸 수 있도록 하는 것. 값이 무조건 있어야 한다.
- 생성자(constructor) 함수
이름 앞에 type이 없음
여러 개 만들 수 있음. 
매개변수의 개수와 타입을 구분
This 같은 클래스의 생성자를 호출할 때 쓰는 자바 키워드
- 일반 함수

- 필드: 변수들 

3. 객체(object)
방법:
1. class 정의
2. class 변수 선언
3. class 변수에 new 연산자를 이용해서 객체 생성 할당

<Exception>
try{} exception 이 발생 할 수 있는 문장을 써줌 exception이 발생 안하면 그대로 그 문장들 수행

catch(java.lang.ArithmeticException e) {} try에 써준 문장에서 exception이 발생하면 catch{}에 속한 문장 수행

인위적인 exception 발생
"throw "
throw new exception("");

static: 위치를 고정시킴 --> 동기화(공유)됨  (ram의 shared data 영역에 들어감)

final: 상수로 만듬 (수정 불가)

Function(method) OverLoading
:함수이름 동일
-매개변수 type 갯수 상이

Function(method) OverRiding
:함수 이름 동일
-기존의 기능을 수정해서 사용(재정의)
 다형성 구현

(int) : cast연산자 = 형변환
--> 값을 정수값으로 바꿔줌
ex)
double Rate = 3.141592
double R1
R1 = 100(정수) * Rate(실수)  --> 실수 
int R2
R2 = 100 * (int)Rate // Rate값이 잠깐 정수형이 됨
--> R2 는 정수형이니까 정수값을 넣기 위하여 실수값인 Rate를 잠깐 정수형으로 바꿔줌 = 소수점 아래로 다 버림.

class 앞에 final을 붙히면 그 클래스의 상속을 금지시킨다.
method앞에 final을 붙히면 그 method를 오버라이딩 할 수 없다.

abstract 추상화 : 클래스를 추상클래스로 만듬
abstract class 0000 { }
추상 클래스 --> 존재하는 클래스지만 그 클래스로는 객체를 만들 수 없다. 가상적인 클래스.
--> 추상클래스는 객체를 만들 수 없다.

추상 메소드 : 본체가 없는 메소드
abstract void 0000();
이렇게 선언해 놓고
상속받은 클래스들이 재정의해서 사용

추상메소드를 하나라고 가지면 그 클래스 앞에 abstract를 붙혀서 추상 클래스로 만들어야함
--> 추상메소드를 포함한 추상클래스로 부터 상속받은 클래스는 반드시 그 추상메소드를 재정의해야함

오버라이딩할때 매개변수는 건들 수 없다.

추상메소드는 상속받은 클래스가 오버라이딩 안하면 무조건 에러남.

슈퍼클래스 변수에 서브 클래스 객체를 대입할 수 있다


인터페이스 안에는 
추상 메소드가 선언 가능하다 
인터페이스 안에 추상메소드는 무조건 오버라이딩을 해야한다. 그리고 일반 메소드는 필요한 것만 오버라이딩이나 사용하면 된다.

다른 클래스에서 인터페이스의 메소드를 구현할 때에는 public을 선언해야한다.

extends 000 implemetns 000 순
implements 000, ***, ---
인터페이스는 다중구현 가능하다.

인터페이스는 인터페이스 끼리만 상속가능하다.
인터페이스끼리만 다중상속도 가능하다.
인터페이스끼리는 구현 못한다.

<인터페이스를 구현할 때>
interface 생성 (.java) --> 실행 --> (.class)
class 생성시 interface 지정 

%d 정수, %s string 값

참조변수: 가리킴
obj1 = new Point(20,30);
obj2 = obj1;
obj1과 obj2는 같은 Point를 가리키게 되므로 그 공간을 공유한다.

Account obj1 = new checkingAccount;   --> O

Account obj1;
Checking Account obj2 = obj1;   --> X
//같은 type이여야하고 자신을 상속받은 sub클래스여야함.

obj2 = obj1
obj1의 타입 = obj2의 타입
obj1의 타입 = obj1의 서브타입

Account obj1;
checkingAccount obj2;
obj2 = (checkingAccount) obj1; --> O

values메소드 : 모든 열거 상수를 리턴하는 메소드
valueOf 메소드 : 주어진 문자열에 해당하는 열거상수를 가져옴

for (Day day : days) --> Day 타입의 day는 days를 가리킨다.  days가 가진 열거상수를 다 꺼낼때까지

package에서 package로 import할 때에 import하는 class의 모든 걸 public으로 만들어줘야함.
즉, 다른 패키지에서 사용할 클래스의 모든 것에 public이라는 키워드를 사용해야함.

import geometry.*;
--> geometry. 으로 시작하는 모든 package를 import한다.

           동일한 클래스  /  다른 클래스 (상속) /  패키지
private         O                   X               X
protected       O                   O               X
public          O                   O               O

protected 와 private은 클래스의 구성요소에만 사용 가능

public > protected > x > private

~.capacity()  --> 기본 크기 16
toString() 버퍼의 문자열을 String 객체로 만들어서 리턴하는 메소드
trimToSize 과도한 버퍼 크기를 적당하게 줄이는 메소드

stok = new StringTokenizer("사과,배,복숭아",",")
-->("사과,배,복숭아"뒤에 ","를  붙히므로써 , 가 구분자가 된다.

stok = new StringTokenizer("사과,배*복숭아",",*")
--> ,* 중복도 됨

stok = new StringTokenizer("사과,배*복숭아",",*",true)  --> true 가 붙으면 구분자도 토큰으로 취급해준다.
